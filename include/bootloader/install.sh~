#!/bin/bash

source $ROOT_DIR/config/initramfs.cnf
source $ROOT_DIR/utils.sh

if [ -z $ROOT_DIR ]; then
    ROOT_DIR=$(realpath ../init_scripts/)
    export ROOT_DIR=$ROOT_DIR
fi

DBG "root directory $ROOT_DIR"

# note the order of code is the order of config file snippets wirting
grub () {
    IN=$ROOT_DIR/config/bootloader.cfg
    OUT=$ROOT_DIR/bootloader/grub.cfg
    parse_config $IN ${GRUB_CONF_KEYS[@]}
    echo ${!MAT[@]}
    echo ${MAT[@]}
    # initialized bootloader environments
    echo -e "insmod ext4\ninsmod gzip\n" > $OUT
    # if dongle exist set dongle priority to highest
    #TODO read in rows with arbitrary row length
    for ((i=0; i<${#MAT[@]}; i++)); do
        if [ ${MAT[$i,NAME]} == 'root' ]; then
            echo "default=${MAT[$i,UUID]}" >> $OUT;
            break;
        fi
    done
    for ((i=0; i<${#MAT[@]}; i++)); do
        uuid=${MAT[$i,UUID]}
        # length of mat isn't representation of rows, therefore -z $uuid is measure for rows length
        if [ -z $uuid ] || [ $uuid == '$NULL' ]; then
            continue
        fi
        name=${MAT[$i,NAME]}; [ -z $name ] && name=$uuid
        linux=${MAT[$i,LINUX]}; [ -z $linux ] && linux=/boot/vmlinuz-$(uname -r)
        initramfs=${MAT[$i,INITRAMFS]}; [ -z $initramfs ] && initramfs=/boot/initramfs-$(uname -r)
        # note cmdline is used as communication line between kernel and initramfs,
        # in this case to send bootloader entrypoint uuid, can you do better, without contaminating kernel cmdline?
        echo -e "menuentry '$name' -id $name {\n\tsearch --set=root --fs-uuid $uuid\n\tlinux $linux root=$uuid bootloader=$uuid\n\tinitrd $initramfs\n}" >> $OUT
    done
}

#todo INSTALLATION IS EXPECTED TO BE DONE FROM HER,  or root directory.
#TODO make a debuging environemnt, with nano, cat, les
[ $GRUB_BOOTLOADER ] && grub

: << 'COMMENT'
parse_bootloader_config() {
    # echo's entries each of format <UUID,KERNEL,INITRAMFS,NAME,ROOT>, or 0 for null
    # TODO resolve regex to exclude file starting with hash sign.
    awk_bootloader_config() {
        echo $(cat ../config/bootloader.cfg | awk '{
             entry = /^[a-zA-Z=0-9\-\/]+$/
        UUID       = 0
        KERNEL = 0
        INITRAMFS = 0
        NAME = 0
        ROOT = 0
        split($entry, arr, " ")
        for (keyvalue in arr) {
            split(arr[keyvalue], arr2, "=")
            for (point in arr2) {
                if (point%2 != 0) {
                   if (arr2[point]=="UUID")
                      UUID=arr2[point+1]
                   else if (arr2[point]=="KERNEL")
                      KERNEL=arr2[point+1]
                   else if (arr2[point]=="INITRAMFS")
                      INITRAMFS=arr2[point+1]
                   else if (arr2[point]=="NAME")
                      NAME=arr2[point+1]
                   else if (arr2[point]=="ROOT")
                      ROOT=arr2[point+1]
                }
            }
        }
        if (UUID != 0) { printf "%s %s %s %s %s", UUID, KERNEL, INITRAMFS, NAME, ROOT }
        }')
    }
    print-menuentry() {
        for r in $(seq 0 $(($menuentries_count-1))); do
            for c in $(seq 0 $(($menuentries_columns-1))); do
                printf " (%s) " ${menuentry[$r,$c]}
            done
            printf "\n"
        done
    }
    row=0
    col=0
    for entry_point in $(awk_bootloader_config); do
        echo "entry_point:$entry_point"
        menuentry[$row,$col]=$entry_point
        ((col++))
        if [ $col -eq $(($menuentries_columns-1)) ]; then
            col=0
            ((row++))
        fi
    done
    menuentries_count=$row
    print-menuentry
    if [ GRUB_BOOTLOADER ] && [ $menuentries_count -gt 0 ]; then grub; fi
}
COMMENT
